"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct


class error_vector_t(object):
    __slots__ = [
        "seq_number",
        "length",
        "value",
        "N_active",
        "active",
        "active_robots",
        "id_sender",
    ]

    __typenames__ = [
        "int64_t",
        "int32_t",
        "double",
        "int32_t",
        "boolean",
        "int32_t",
        "int32_t",
    ]

    __dimensions__ = [None, None, ["length"], None, None, ["N_active"], None]

    def __init__(self):
        self.seq_number = 0
        self.length = 0
        self.value = []
        self.N_active = 0
        self.active = False
        self.active_robots = []
        self.id_sender = 0

    def encode(self):
        buf = BytesIO()
        buf.write(error_vector_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.seq_number, self.length))
        buf.write(struct.pack(">%dd" % self.length, *self.value[: self.length]))
        buf.write(struct.pack(">ib", self.N_active, self.active))
        buf.write(struct.pack(">%di" % self.N_active, *self.active_robots[: self.N_active]))
        buf.write(struct.pack(">i", self.id_sender))

    def decode(data):
        if hasattr(data, "read"):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != error_vector_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return error_vector_t._decode_one(buf)

    decode = staticmethod(decode)

    def _decode_one(buf):
        self = error_vector_t()
        self.seq_number, self.length = struct.unpack(">qi", buf.read(12))
        self.value = struct.unpack(">%dd" % self.length, buf.read(self.length * 8))
        self.N_active = struct.unpack(">i", buf.read(4))[0]
        self.active = bool(struct.unpack("b", buf.read(1))[0])
        self.active_robots = struct.unpack(">%di" % self.N_active, buf.read(self.N_active * 4))
        self.id_sender = struct.unpack(">i", buf.read(4))[0]
        return self

    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if error_vector_t in parents:
            return 0
        tmphash = (0x6BA3988793EEAA21) & 0xFFFFFFFFFFFFFFFF
        tmphash = (((tmphash << 1) & 0xFFFFFFFFFFFFFFFF) + (tmphash >> 63)) & 0xFFFFFFFFFFFFFFFF
        return tmphash

    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if error_vector_t._packed_fingerprint is None:
            error_vector_t._packed_fingerprint = struct.pack(">Q", error_vector_t._get_hash_recursive([]))
        return error_vector_t._packed_fingerprint

    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", error_vector_t._get_packed_fingerprint())[0]
